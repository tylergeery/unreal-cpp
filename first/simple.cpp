#include <iostream>
#include <string>
#include <nlohmann/json.hpp>

using namespace std;
using json = nlohmann::json;

string get_display_char_from_count(int count) {
    switch (count) {
        case 15:
            return string("|=|");
        case 14:
            return string("|_|");
        case 13:
            return string("|= ");
        case 12:
            return string("|_");
        case 11:
            return string("|-|");
        case 10:
            return string("| |");
        case 9:
            return string("|- ");
        case 8:
            return string("|  ");
        case 7:
            return string(" =|");
        case 6:
            return string(" =|");
        case 5:
            return string(" = ");
        case 4:
            return string(" _ ");
        case 3:
            return string(" -|");
        case 2:
            return string("  |");
        case 1:
            return string(" - ");
        default:
            return string("   ");
    }
}

int main() 
{ 
    auto json_maze = "["
        "["
            "[1, 1, 0, 1],"
            "[1, 0, 0, 1],"
            "[1, 1, 0, 0],"
            "[1, 0, 1, 1],"
            "[1, 0, 1, 0],"
            "[1, 0, 0, 0],"
            "[1, 1, 0, 0],"
            "[1, 1, 0, 1],"
            "[1, 0, 0, 1],"
            "[1, 1, 1, 0]"
        "],"
        "["
            "[0, 0, 0, 1],"
            "[0, 0, 0, 0],"
            "[0, 0, 0, 0],"
            "[1, 0, 0, 0],"
            "[1, 0, 0, 0],"
            "[0, 0, 0, 0],"
            "[0, 0, 0, 0],"
            "[0, 0, 0, 0],"
            "[0, 1, 0, 0],"
			"[1, 1, 0, 1]"
		"],"
		"["
			"[0, 0, 0, 1],"
			"[0, 1, 1, 0],"
			"[0, 1, 0, 1],"
			"[0, 0, 0, 1],"
			"[0, 0, 0, 0],"
			"[0, 0, 1, 0],"
			"[0, 0, 0, 0],"
			"[0, 0, 0, 0],"
			"[0, 0, 0, 0],"
			"[0, 1, 1, 0]"
		"],"
		"["
			"[0, 0, 0, 1],"
			"[1, 1, 0, 0],"
			"[0, 0, 0, 1],"
			"[0, 1, 1, 0],"
			"[0, 1, 1, 1],"
			"[1, 0, 0, 1],"
			"[0, 0, 0, 0],"
			"[0, 0, 1, 0],"
			"[0, 0, 0, 0],"
			"[1, 1, 0, 0]"
		"],"
		"["
			"[0, 1, 0, 1],"
			"[0, 0, 0, 1],"
			"[0, 0, 1, 0],"
			"[1, 0, 0, 0],"
			"[1, 1, 0, 0],"
			"[0, 0, 0, 1],"
			"[0, 1, 0, 0],"
			"[1, 0, 0, 1],"
			"[0, 0, 1, 0],"
			"[0, 1, 1, 0]"
		"],"
		"["
			"[0, 0, 1, 1],"
			"[0, 1, 0, 0],"
			"[1, 0, 0, 1],"
			"[0, 0, 0, 0],"
			"[0, 1, 0, 0],"
			"[0, 0, 1, 1],"
			"[0, 1, 0, 0],"
			"[0, 1, 0, 1],"
			"[1, 0, 1, 1],"
			"[1, 1, 0, 0]"
		"],"
		"["
			"[1, 0, 0, 1],"
			"[0, 0, 0, 0],"
			"[0, 1, 0, 0],"
			"[0, 0, 0, 1],"
			"[0, 0, 0, 0],"
			"[1, 0, 1, 0],"
			"[0, 0, 0, 0],"
			"[0, 0, 0, 0],"
			"[1, 0, 0, 0],"
			"[0, 1, 0, 0]"
		"],"
		"["
			"[0, 0, 1, 1],"
			"[0, 1, 0, 0],"
			"[0, 0, 0, 1],"
			"[0, 1, 0, 0],"
			"[0, 0, 0, 1],"
			"[1, 0, 1, 0],"
			"[0, 1, 0, 0],"
			"[0, 0, 0, 1],"
			"[0, 0, 1, 0],"
			"[0, 1, 1, 0]"
		"],"
		"["
			"[1, 0, 0, 1],"
			"[0, 0, 0, 0],"
			"[0, 1, 0, 0],"
			"[0, 0, 1, 1],"
			"[0, 0, 0, 0],"
			"[1, 1, 1, 0],"
			"[0, 1, 0, 1],"
			"[0, 0, 1, 1],"
			"[1, 1, 0, 0],"
			"[1, 1, 1, 1]"
		"],"
		"["
			"[0, 1, 1, 1],"
			"[0, 0, 1, 1],"
			"[0, 1, 1, 0],"
			"[1, 0, 1, 1],"
			"[0, 0, 1, 0],"
			"[1, 0, 1, 0],"
			"[0, 1, 1, 0],"
			"[1, 0, 1, 1],"
			"[0, 0, 1, 0],"
            "[1, 1, 1, 0]"
        "]"
    "]"_json;

    for (int i = 0; i < json_maze.size(); i++) {
        for (int j = 0; j < json_maze[i].size(); j++) {
            int count = 0;

            for (int k = 0; k < json_maze[i][j].size(); k++) {
                if (json_maze[i][j][k] > 0) {
                    if (k == 0) {
                        count += 1;
                    }

                    if (k == 1) {
                        count += 2;
                    }

                    if (k == 2) {
                        count += 4;
                    }

                    if (k == 3) {
                        count += 8;
                    }
                }
            }

            std::cout << get_display_char_from_count(count);
        }
        std::cout << endl;
    }

    return 0;
} 